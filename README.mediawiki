This ZenPack allows for monitoring of RabbitMQ. See the Usage section for details on what is monitored. You can watch the [http://www.youtube.com/watch?v=CAak2ayFcV0 Monitoring RabbitMQ] video for a quick introduction that covers most of the details below.

== Gallery ==
<gallery widths=250px heights=127px>
rabbitmq_components.png
rabbitmq_exchanges.png
rabbitmq_nodes_channels.png
rabbitmq_nodes_throughput.png
rabbitmq_nodes.png
rabbitmq_queues_metrics.png
rabbitmq_queues.png
rabbitmq_vhosts.png
</gallery>

== Related ZenPacks ==
There already exist at least two community Zenpacks that provide monitoring for RabbitMQ.

* ''ZenPacks.dnalley.AMQPEventMonitor'' by David Nalley: Very different functionality than what's provided by this ZenPack. It allows you to pull messages from a defined queue and automatically turn them into Zenoss events.

* ''ZenPacks.community.RabbitMQ'' by Greg Guthe: More similar to this ZenPack in its functionality. Global metrics for queued messages and rates. It appears to require that the HTTP management API plugin be installed into your RabbitMQ instances, and that a Net-SNMP extension also written by Greg Guthe be installed.

The major differences between the ZenPacks.community.RabbitMQ and this pack are that this pack simply runs various rabbitmqctl commands over SSH both to model the node, vhosts, exchanges and queues; as well as to monitor connection, channel and per-queue metrics. So you don't need to install anything extra on your RabbitMQ server, and you get more granularity on the monitoring.

In the future this pack might be extended to also support RabbitMQ's HTTP management API plugin in addition to the SSH method.

== Usage ==
Installing the ZenPack will add the following objects to your Zenoss system.

;Modeling Plugins
* zenoss.ssh.RabbitMQ

;Monitoring Templates
* RabbitMQNode in /Devices
* RabbitMQQueue in /Devices

;Event Classes
* /Status/RabbitMQ
* /Perf/RabbitMQ

;Command Parsers
* ZenPacks.zenoss.RabbitMQ.parsers.RabbitMQCTL

These monitoring templates should not be bound directly to any devices in the system.

To start monitoring your RabbitMQ server you will need to setup SSH access so that your Zenoss collector server will be able to SSH into your RabbitMQ server(s) as a user who has permission to run the ''rabbitmqctl'' command. This almost always means the root user. See the ''Using a Non-Root User'' section below for instructions on allowing non-root users to run ''rabbitmqctl''. To do this you need to set the following zProperties for the RabbitMQ devices or their device class in Zenoss.

* zCommandUsername
* zCommandPassword
* zKeyPath

The zCommandUsername property must be set. To use public key authentication you must verify that the public portion of the key referenced in zKeyPath is installed in the `~/.ssh/authorized_keys` file for the appropriate user on the RabbitMQ server. If this key has a passphrase you should set it in the zCommandPassword property. If you'd rather use password authentication than setup keys, simply put the user's password in the zCommandPassword property.

You should then add the zenoss.ssh.RabbitMQ modeler plugin to the device, or device class containing your RabbitMQ servers and remodel the device(s). This will automatically find the node, vhosts, exchanges and queues and begin monitoring them immediately for the following metrics.

;Node Values
* Status - Running or not? Generates event on failure.
* Open Connections & Channels
* Sent & Received Bytes Rate
* Sent & Received Messages Rate
* Depth of Send Queue
* Consumers
* Unacknowledged & Uncommitted Messages

;Queue Values
* Ready, Unacknowledged & Total Messages
* Memory Usage
* Consumers

There is a default threshold of 1,000,000 messages per queue. This is almost certainly an absurdly high threshold that shouldn't trip in normal systems. However, by clicking into the details of any individual queue you can set the per-queue threshold to a more reasonable value that makes sense for a given queue.

=== Using a Non-Root User ===
This ZenPack requires the ability to run the ''rabbitmqctl'' command remotely on your RabbitMQ server(s) using SSH. By default, the ''rabbitmqctl'' command is only allowed to be run by the '''root''' and '''rabbitmq''' users. Furthermore, this ZenPack expects the ''rabbitmqctl'' command be in the user's path. Normally this is only true for the root user.

{{note}} There's a very good reason for this restriction. Once a user is allowed to execute the ``rabbitmqctl`` command, they are able to perform the following actions.

* Stop, Start or Reset RabbitMQ
* Control a RabbitMQ Cluster
* Close Open Connections
* Manage Users and Security
* Manage VHosts

In a nutshell, this means that any user with permission to run ''rabbitmqctl'' can wreak total havoc on your RabbitMQ server if they had the intent to do so.

Assuming that you've created a user named '''zenmonitor''' on your RabbitMQ servers for monitoring purposes, you can follow these steps to allow the '''zenmonitor''' user to run ''rabbitmqctl''.

# Install the '''sudo''' package on your server.
# Make sudo not require a TTY. This allows sudo to be run via ssh.
## Run ''visudo'' as root.
## Find a line containing ''Defaults requiretty'' and comment it out by prefixing the line with a ''#''.
## Type ''ESC'' then '':wq'' to save the sudo configuration.
# Allow the *zenmonitor* user to run rabbitmqctl.
## Run ''visudo'' as root.
## Add the following line to the bottom of the file.
##: zenmonitor ALL=(ALL) NOPASSWD: /usr/sbin/rabbitmqctl
## Type ''ESC'' then '':wq'' to save the sudo configuration.
# Alias rabbitmqctl for the '''zenmonitor''' user.
## Add the following lines to ''/home/zenmonitor/.bashrc''.
##: shopt -s expand_aliases
##: alias rabbitmqctl="sudo /usr/sbin/rabbitmqctl"

== Change Log ==

;1.0.6
* (ZEN-5533) /Status/RabbitMQ for queues don't auto-clear when resolved

;1.0.5
* (ZEN-3526) RabbitMQ: No data returned for command
